import os
import asyncio
from dotenv import find_dotenv, load_dotenv
from langchain_mcp_adapters.client import MultiServerMCPClient
from langchain_mcp_adapters.tools import load_mcp_tools
from langchain_openai import ChatOpenAI
from langgraph.checkpoint.memory import InMemorySaver
from langgraph.prebuilt import create_react_agent
from nicegui import ui, app



# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(find_dotenv())



model = ChatOpenAI(
    model=os.getenv("MODEL_NAME"),
    base_url="https://openrouter.ai/api/v1",
    api_key=os.getenv("OPEN_ROUTER_KEY"),
)



checkpointer = InMemorySaver()
template = "–¢—ã - –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏ —á–µ—Ä–µ–∑ MCP"
config = {"configurable": {"thread_id": "1"}}



# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞–≥–µ–Ω—Ç–∞
agent = None
client = None
session = None
input_field = None
chat_container = None



# –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
def add_custom_styles():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –≤ –¥—É—Ö–µ –∫–Ω–∏–≥–∏ '–ì–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ'"""
    ui.add_head_html('''
    <style>
        /* –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ –≤ –¥—É—Ö–µ –æ–±–ª–æ–∂–∫–∏ "–ì–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ" */
        :root {
            --deep-blue: #1a237e;
            --neural-orange: #ff6f00;
            --dark-bg: #0d1117;
            --card-bg: #161b22;
            --text-primary: #e6edf3;
            --text-secondary: #7d8590;
            --accent-blue: #2196f3;
            --success-green: #238636;
            --error-red: #da3633;
            --warning-yellow: #d29922;
        }
        
        /* –û–±—â–∏–π —Ñ–æ–Ω */
        body {
            background: linear-gradient(135deg, var(--dark-bg) 0%, var(--deep-blue) 100%);
            color: var(--text-primary);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            min-height: 100vh;
        }
        
        /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ */
        .neural-title {
            background: linear-gradient(45deg, var(--neural-orange), var(--accent-blue));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            font-weight: 700;
            text-shadow: 0 0 20px rgba(255, 111, 0, 0.3);
        }
        
        /* –ö–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π */
        .user-message {
            background: linear-gradient(135deg, var(--accent-blue), var(--neural-orange));
            border: none;
            box-shadow: 0 4px 15px rgba(33, 150, 243, 0.3);
            border-radius: 18px;
        }
        
        .assistant-message {
            background: var(--card-bg);
            border: 1px solid rgba(255, 111, 0, 0.2);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
            border-radius: 18px;
        }
        
        .system-message {
            background: linear-gradient(90deg, var(--warning-yellow), var(--neural-orange));
            border: none;
            box-shadow: 0 2px 10px rgba(210, 153, 34, 0.3);
            border-radius: 12px;
        }
        
        /* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —á–∞—Ç–∞ */
        .chat-container {
            background: rgba(22, 27, 34, 0.8);
            border: 1px solid rgba(255, 111, 0, 0.3);
            border-radius: 16px;
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);
        }
        
        /* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */
        .neural-input {
            background: var(--card-bg);
            border: 2px solid rgba(255, 111, 0, 0.3);
            border-radius: 12px;
            color: var(--text-primary);
            transition: all 0.3s ease;
        }


        .neural-input:focus {
            border-color: var(--neural-orange);
            box-shadow: 0 0 20px rgba(255, 111, 0, 0.4);
        }
        
        /* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */
        .send-button {
            background: linear-gradient(135deg, var(--neural-orange), var(--accent-blue));
            border: none;
            border-radius: 12px;
            color: white;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(255, 111, 0, 0.3);
        }
        
        .send-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(255, 111, 0, 0.4);
        }
        
        /* –°—Ç–∞—Ç—É—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã */
        .status-ready {
            color: var(--success-green);
            text-shadow: 0 0 10px rgba(35, 134, 54, 0.5);
        }
        
        .status-error {
            color: var(--error-red);
            text-shadow: 0 0 10px rgba(218, 54, 51, 0.5);
        }
        
        .status-warning {
            color: var(--warning-yellow);
            text-shadow: 0 0 10px rgba(210, 153, 34, 0.5);
        }
        
        /* –ê–Ω–∏–º–∞—Ü–∏–∏ */
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.7; }
            100% { opacity: 1; }
        }
        
        .loading-indicator {
            animation: pulse 1.5s infinite;
        }
        
        /* –°–∫—Ä–æ–ª–ª–±–∞—Ä */
        ::-webkit-scrollbar {
            width: 8px;
        }
        
        ::-webkit-scrollbar-track {
            background: var(--dark-bg);
        }
        
        ::-webkit-scrollbar-thumb {
            background: linear-gradient(45deg, var(--neural-orange), var(--accent-blue));
            border-radius: 4px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: linear-gradient(45deg, var(--accent-blue), var(--neural-orange));
        }
        
        /* Markdown —Å—Ç–∏–ª–∏ */
        .markdown-content code {
            background: rgba(255, 111, 0, 0.1);
            border: 1px solid rgba(255, 111, 0, 0.3);
            border-radius: 4px;
            color: var(--neural-orange);
        }
        
        .markdown-content pre {
            background: var(--dark-bg);
            border: 1px solid rgba(255, 111, 0, 0.3);
            border-radius: 8px;
        }
        
        .markdown-content blockquote {
            border-left: 4px solid var(--neural-orange);
            background: rgba(255, 111, 0, 0.05);
        }
    </style>
    ''')



async def initialize_agent():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∞–≥–µ–Ω—Ç–∞"""
    global agent, client, session
    
    try:
        client = MultiServerMCPClient(
            {
                "temp": {
                    "url": f"http://{os.getenv('MCP_SERVICE_NAME')}:8000/mcp",
                    "transport": "streamable_http",
                }
            }
        )
        
        session = client.session("temp")
        session_obj = await session.__aenter__()
        tools = await load_mcp_tools(session_obj)
        
        agent = create_react_agent(
            model,
            tools,
            prompt=template,
            checkpointer=checkpointer,
        )
        
        print("–ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞: {e}")
        return False



async def cleanup_agent():
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
    global session, client
    
    try:
        if session:
            await session.__aexit__(None, None, None)
        if client:
            await client.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")



def add_user_message(message_text):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç"""
    with chat_container:
        with ui.row().classes('w-full mb-3 justify-end'):
            with ui.card().classes('user-message text-white p-4 max-w-xs shadow-lg'):
                ui.label(message_text).classes('text-sm font-medium')
                ui.label('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å').classes('text-xs opacity-90 mt-2 font-light')



def add_assistant_message(message_text):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Markdown"""
    with chat_container:
        with ui.row().classes('w-full mb-3 justify-start'):
            with ui.card().classes('assistant-message p-4 max-w-md shadow-lg'):
                ui.markdown(message_text).classes('text-sm markdown-content text-gray-100')
                ui.label('ü§ñ –ù–µ–π—Ä–æ-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç').classes('text-xs mt-2 font-light').style('color: var(--neural-orange)')



def add_system_message(message_text):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    with chat_container:
        with ui.row().classes('w-full mb-3 justify-center'):
            with ui.card().classes('system-message p-3 loading-indicator'):
                ui.label(message_text).classes('text-xs font-medium text-gray-900')



async def send_message(message_text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    global chat_container
    
    print(f"send_message –≤—ã–∑–≤–∞–Ω–∞ —Å —Ç–µ–∫—Å—Ç–æ–º: '{message_text}'")
    
    if not chat_container:
        print("chat_container –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return
    
    if not message_text or not message_text.strip():
        print("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    
    print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    add_user_message(message_text)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    add_system_message("üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–≤—è–∑–∏...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞
        if agent:
            response = await agent.ainvoke(
                {"messages": [{"role": "user", "content": message_text}]}, 
                config
            )
            
            # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏)
            if chat_container.default_slot.children:
                chat_container.default_slot.children[-1].delete()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            assistant_message = response['messages'][-1].content
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Markdown
            add_assistant_message(assistant_message)
            
        else:
            # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            if chat_container.default_slot.children:
                chat_container.default_slot.children[-1].delete()
            add_system_message("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
                
    except Exception as e:
        # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        if chat_container.default_slot.children:
            chat_container.default_slot.children[-1].delete()
        add_system_message(f"‚ùå –û—à–∏–±–∫–∞ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")



# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@app.on_startup
async def startup():
    await initialize_agent()



# –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
@app.on_shutdown
async def shutdown():
    await cleanup_agent()



@ui.page('/')
def main():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global input_field, chat_container
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
    add_custom_styles()
    
    ui.page_title('üß† Deep Learning Assistant')
    
    with ui.column().classes('w-full max-w-5xl mx-auto p-6'):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Å—Ç–∏–ª–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π
        with ui.row().classes('w-full justify-center mb-6'):
            ui.label('üß† Deep Learning Assistant').classes('text-4xl font-bold neural-title')
        
        with ui.row().classes('w-full justify-center mb-8'):
            ui.label('–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π').classes('text-lg text-gray-400 font-light')
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        with ui.row().classes('w-full justify-center mb-6'):
            status_container = ui.row().classes('items-center gap-3')
            
            with status_container:
                status_icon = ui.label('üîÑ').classes('text-xl')
                status_label = ui.label('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏...').classes('text-sm status-warning font-medium')
        
        def update_status():
            if agent:
                status_icon.text = 'üü¢'
                status_label.text = '‚ú® –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –∞–∫—Ç–∏–≤–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ'
                status_label.classes('text-sm status-ready font-medium')
            else:
                status_icon.text = 'üî¥'
                status_label.text = '‚ùå –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'
                status_label.classes('text-sm status-error font-medium')
        
        ui.timer(1.0, update_status)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —á–∞—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        with ui.scroll_area().classes('w-full h-[600px] chat-container p-6 mb-6'):
            chat_container = ui.column().classes('w-full gap-2')
            
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ Deep Learning
            add_assistant_message(
                "üöÄ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Deep Learning Assistant!**\n\n"
                "–Ø - **–Ω–µ–π—Ä–æ–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫**, –æ–±—É—á–µ–Ω–Ω—ã–π –Ω–∞ –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.\n\n"
                "**–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
                "- üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ *–Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–≤—è–∑–∏*\n"
                "- üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é **–º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è**\n"
                "- üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å MCP –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞\n"
                "- üí° –ü–æ–¥–¥–µ—Ä–∂–∫–∞ `Markdown` —Ä–∞–∑–º–µ—Ç–∫–∏\n\n"
                "> *\"–ì–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ - —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∞–ª–≥–æ—Ä–∏—Ç–º, —ç—Ç–æ —Å–ø–æ—Å–æ–± –º—ã—à–ª–µ–Ω–∏—è\"*\n\n"
                "**–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ –º–∏—Ä–∞ –ò–ò! ü§ñ**"
            )
            
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        def handle_send():
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
            message_text = input_field.value.strip()
            print(f"handle_send: –ø–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç '{message_text}'")
            
            if message_text:
                # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ —Å—Ä–∞–∑—É
                input_field.value = ''
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                asyncio.create_task(send_message(message_text))
            else:
                print("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ handle_send")
        
        with ui.row().classes('w-full gap-4'):
            input_field = ui.input(
                placeholder='üß† –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
            ).classes('flex-grow neural-input text-lg p-4').props('input-style="color: var(--text-primary)"')
            
            input_field.on('keydown.enter', lambda: handle_send())
            
            send_button = ui.button(
                'üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å', 
                on_click=handle_send
            ).classes('send-button px-6 py-4 text-lg font-semibold')
        
        # –§—É—Ç–µ—Ä —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        with ui.row().classes('w-full justify-center mt-8'):
            ui.label('Powered by Deep Learning & Neural Networks').classes('text-xs text-gray-500 font-light')



# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ in {"__main__", "__mp_main__"}:
    ui.run(host='0.0.0.0', port=8080, reload=False)
